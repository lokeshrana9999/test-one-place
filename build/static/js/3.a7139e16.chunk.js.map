{"version":3,"sources":["components/look/web/RenderUpload.jsx","components/look/web/RenderUploadWithCrop.jsx","components/look/web/Input.jsx","components/look/web/InputArea.jsx","components/look/web/Form.jsx","components/look/web/Button.jsx","components/look/web/RenderDynamicFieldSocial.jsx","components/look/web/RenderSelect.jsx","components/look/web/Option.jsx","components/look/web/Popconfirm.jsx","components/form/FieldAdapter.jsx","components/form/validation.js"],"names":["FormItem","Form","Item","React","Component","RenderUpload","props","onChangeHandler","file","fileList","arrayHelpers","status","setload","response","upload_obj","upload","input","onChange","setState","handleCancel","previewVisible","handleChange","state","previewImage","value","this","label","className","children","meta","handleBlur","aspect","uploadButton","console","log","validateStatus","touched","error","grid","quality","rotate","onFocus","action","process","listType","onPreview","handlePreview","length","StyledADInput","styled","ADInput","withTheme","formik","setFieldValue","name","extra","onBlur","e","target","ADTextArea","Input","TextArea","StyledADTextArea","Button","type","DrawerWrapperRenderer","div","InputStylized","AddSocialMedia","DynamicFieldSet","showDrawer","visible","onClose","socialClickHandler","id","add","obj","link","category","push","drawerOpenState","socialMediaCategoryList","values","formItems","availableSocialMediaCategoryList","filter","item","find","vall","_id","getImageUrlById","idd","socObj","ss","image","url","map","v","indexv","required","key","style","marginBottom","component","placeholder","prefix","src","alt","width","height","marginRight","suffix","color","fontSize","onClick","remove","marginTop","align","flex","size","placement","closable","getContainer","position","overflowX","justify","socia","Select","Option","Popconfirm","FieldAdapter","secondArg","fieldType","_isAMomentObject","Array","isArray","isString","isNumber","checked","parseInt","setFieldTouched","onChangeText","defaultChecked","disabled","defaultValue","getPath","errors","createElement","connect","undefined","maxLength","max","minLength","min","phoneNumber","test","validate","object","schema","collectedErrors","validateFormInner","innerSchema","collector","Object","keys","hasOwnProperty","forEach","s","validator","result"],"mappings":"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","file":"static/js/3.a7139e16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Form, Upload, Modal } from \"antd\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nexport default class RenderUpload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // To Do Fix this thing\r\n    this.state = {\r\n      previewVisible: false,\r\n      previewImage: \"\",\r\n      fileList: props.value ? [props.value] : [],\r\n    };\r\n  }\r\n\r\n  onChangeHandler = ({ file, fileList }) => {\r\n    const arrayHelpers = this.props.arrayHelpers;\r\n\r\n    if (file.status === \"uploading\") {\r\n      this.props.setload(true);\r\n    }\r\n\r\n    if (file.status == \"done\") {\r\n      this.props.setload(false);\r\n      if (file.response) {\r\n        let upload_obj = file.response && file.response.upload;\r\n        if (upload_obj) {\r\n          // console.log(upload_obj);\r\n          //set value in form\r\n          this.props.input.onChange(upload_obj);\r\n        }\r\n      }\r\n    } else if (file.status == \"removed\") {\r\n      this.props.setload(false);\r\n      // console.log(file);\r\n      //remove value in form\r\n      this.props.input.onChange(\"\");\r\n    }\r\n    this.setState({ fileList });\r\n  };\r\n\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  // handlePreview = file => {\r\n  //   this.setState({\r\n  //     previewImage: file.url || file.thumbUrl,\r\n  //     previewVisible: true\r\n  //   });\r\n  // };\r\n\r\n  handleChange = ({ fileList }) => this.setState({ fileList });\r\n\r\n  render() {\r\n    // { input, label, meta: { touched, error }, defaultFileList }) = this.props\r\n    // const touched = this.props.meta.touched;\r\n    // const error = this.props.meta.error;\r\n    const { label, className, children, meta, handleBlur } = this.props;\r\n    // const input = this.props.input;\r\n    // console.log(input);\r\n    // const defaultFileList = this.props.defaultFileList;\r\n\r\n    // const cloudinary_url = 'https://api.cloudinary.com/v1_1/nodejs-starter-kit/image/upload';\r\n    // const cloudinary_data = { upload_preset: 'hycdtdxe' };\r\n\r\n    // const headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\r\n    // const cloudinary_data = { upload_preset: 'nxzf2ip6' };\r\n    const imageApiUrl = process.env.REACT_APP_IMAGE_API_URL;\r\n\r\n    let validateStatus = \"\";\r\n    // if (touched && error) {\r\n    //   validateStatus = 'error';\r\n    // }\r\n    // let defaultFileList = [];\r\n    // if (this.props.values) {\r\n    //   defaultFileList = this.props.values.map((img, index) => ({\r\n    //     uid: index,\r\n    //     name: 'link',\r\n    //     status: 'done',\r\n    //     url: img.imageUrl,\r\n    //     thumbUrl: img.imageUrl\r\n    //   }));\r\n    // }\r\n\r\n    const { previewVisible, previewImage, fileList } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        {/* <Icon type=\"plus\" /> */}\r\n        <div className=\"ant-upload-text\">{label}</div>\r\n      </div>\r\n    );\r\n    console.log('Meta', meta);\r\n    return (\r\n      <FormItem\r\n        validateStatus={validateStatus}\r\n        validateStatus={meta.touched && meta.error && \"error\"}\r\n        extra={meta.touched && meta.error}\r\n      >\r\n        <div className={`clearfix antd-upload-custom-wrapper ${className}`}>\r\n          <Upload\r\n            onFocus={handleBlur}\r\n            action={imageApiUrl}\r\n            listType=\"picture-card\"\r\n            fileList={fileList}\r\n            onPreview={this.handlePreview}\r\n            onChange={this.onChangeHandler}\r\n          >\r\n            {fileList.length >= 1 ? null : uploadButton}\r\n            {children}\r\n          </Upload>\r\n          {/* <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\r\n            <img alt=\"image\" style={{ width: '100%' }} src={previewImage} />\r\n          </Modal> */}\r\n        </div>{\" \"}\r\n      </FormItem>\r\n    );\r\n  }\r\n}\r\nRenderUpload.propTypes = {\r\n  input: PropTypes.object,\r\n  label: PropTypes.string,\r\n  setload: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Form, Upload, Modal } from \"antd\";\r\nimport ImgCrop from \"antd-img-crop\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nexport default class RenderUpload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // To Do Fix this thing\r\n    this.state = {\r\n      previewVisible: false,\r\n      previewImage: \"\",\r\n      fileList: props.value ? [props.value] : [],\r\n    };\r\n  }\r\n\r\n  onChangeHandler = ({ file, fileList }) => {\r\n    const arrayHelpers = this.props.arrayHelpers;\r\n\r\n    if (file.status === \"uploading\") {\r\n      this.props.setload(true);\r\n    }\r\n\r\n    if (file.status == \"done\") {\r\n      this.props.setload(false);\r\n      if (file.response) {\r\n        let upload_obj = file.response && file.response.upload;\r\n        if (upload_obj) {\r\n          // console.log(upload_obj);\r\n          //set value in form\r\n          this.props.input.onChange(upload_obj);\r\n        }\r\n      }\r\n    } else if (file.status == \"removed\") {\r\n      this.props.setload(false);\r\n      // console.log(file);\r\n      //remove value in form\r\n      this.props.input.onChange(\"\");\r\n    }\r\n    this.setState({ fileList });\r\n  };\r\n\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  // handlePreview = file => {\r\n  //   this.setState({\r\n  //     previewImage: file.url || file.thumbUrl,\r\n  //     previewVisible: true\r\n  //   });\r\n  // };\r\n\r\n  handleChange = ({ fileList }) => this.setState({ fileList });\r\n\r\n  render() {\r\n    // { input, label, meta: { touched, error }, defaultFileList }) = this.props\r\n    // const touched = this.props.meta.touched;\r\n    // const error = this.props.meta.error;\r\n    const { label, className, children, meta, handleBlur, aspect } = this.props;\r\n    // const input = this.props.input;\r\n    // console.log(input);\r\n    // const defaultFileList = this.props.defaultFileList;\r\n\r\n    // const cloudinary_url = 'https://api.cloudinary.com/v1_1/nodejs-starter-kit/image/upload';\r\n    // const cloudinary_data = { upload_preset: 'hycdtdxe' };\r\n\r\n    // const headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\r\n    // const cloudinary_data = { upload_preset: 'nxzf2ip6' };\r\n    const imageApiUrl = process.env.REACT_APP_IMAGE_API_URL;\r\n\r\n    let validateStatus = \"\";\r\n    // if (touched && error) {\r\n    //   validateStatus = 'error';\r\n    // }\r\n    // let defaultFileList = [];\r\n    // if (this.props.values) {\r\n    //   defaultFileList = this.props.values.map((img, index) => ({\r\n    //     uid: index,\r\n    //     name: 'link',\r\n    //     status: 'done',\r\n    //     url: img.imageUrl,\r\n    //     thumbUrl: img.imageUrl\r\n    //   }));\r\n    // }\r\n\r\n    const { previewVisible, previewImage, fileList } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        {/* <Icon type=\"plus\" /> */}\r\n        <div className=\"ant-upload-text\">{label}</div>\r\n      </div>\r\n    );\r\n    console.log(\"Meta\", meta);\r\n    return (\r\n      <FormItem\r\n        validateStatus={validateStatus}\r\n        validateStatus={meta.touched && meta.error && \"error\"}\r\n        extra={meta.touched && meta.error}\r\n      >\r\n        <div className={`clearfix antd-upload-custom-wrapper ${className}`}>\r\n          <ImgCrop aspect={aspect} grid={true} quality={1} rotate>\r\n            <Upload\r\n              onFocus={handleBlur}\r\n              action={imageApiUrl}\r\n              listType=\"picture-card\"\r\n              fileList={fileList}\r\n              onPreview={this.handlePreview}\r\n              onChange={this.onChangeHandler}\r\n            >\r\n              {fileList.length >= 1 ? null : uploadButton}\r\n              {children}\r\n            </Upload>\r\n          </ImgCrop>\r\n          {/* <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\r\n            <img alt=\"image\" style={{ width: '100%' }} src={previewImage} />\r\n          </Modal> */}\r\n        </div>{\" \"}\r\n      </FormItem>\r\n    );\r\n  }\r\n}\r\nRenderUpload.propTypes = {\r\n  input: PropTypes.object,\r\n  label: PropTypes.string,\r\n  setload: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input as ADInput, Form } from \"antd\";\r\nimport styled, { withTheme } from \"styled-components\";\r\n\r\nconst StyledADInput = styled(ADInput)`\r\n  /* display:block; */\r\n`;\r\n\r\nconst Input = ({ children, ...props }) => {\r\n  const {\r\n    formik: { setFieldValue, handleBlur },\r\n    name,\r\n    meta,\r\n  } = props;\r\n  return (\r\n    <Form.Item\r\n      validateStatus={meta.touched && meta.error && \"error\"}\r\n      extra={meta.touched && meta.error}\r\n    >\r\n      <StyledADInput\r\n        onBlur={handleBlur}\r\n        {...props}\r\n        onChange={(e) => {\r\n          setFieldValue(name, e.target.value);\r\n        }}\r\n      >\r\n        {children}\r\n      </StyledADInput>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default withTheme(Input);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Form } from \"antd\";\r\nimport styled, { withTheme } from \"styled-components\";\r\n\r\nconst ADTextArea = Input.TextArea;\r\n\r\nconst StyledADTextArea = styled(ADTextArea)`\r\n  /* display:block; */\r\n`;\r\n\r\nconst TextArea = ({ children, ...props }) => {\r\n  const {\r\n    formik: { setFieldValue, handleBlur },\r\n    name,\r\n    meta,\r\n  } = props;\r\n  console.log('textarea', props);\r\n  return (\r\n    <Form.Item\r\n      validateStatus={meta.touched && meta.error && \"error\"}\r\n      extra={meta.touched && meta.error}\r\n    >\r\n      <StyledADTextArea\r\n        onBlur={handleBlur}\r\n        {...props}\r\n        onChange={(e) => {\r\n          setFieldValue(name, e.target.value);\r\n        }}\r\n      >\r\n        {children}\r\n      </StyledADTextArea>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nTextArea.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default withTheme(TextArea);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form as ADForm } from 'antd';\r\n\r\nconst Form = ({ children, ...props }) => {\r\n  return <ADForm {...props}>{children}</ADForm>;\r\n};\r\n\r\nForm.propTypes = {\r\n  children: PropTypes.node,\r\n  type: PropTypes.string\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button as ADButton } from \"antd\";\r\n\r\nconst Button = ({ children, type, ...props }) => {\r\n  return (\r\n    <ADButton type={type} {...props}>\r\n      {children}\r\n    </ADButton>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FieldAdapter as Field } from \"../../form\";\r\nimport { Form, Drawer } from \"antd\";\r\nimport { Flex } from \"antd-mobile\";\r\nimport {\r\n  AiOutlineMinusCircle,\r\n  AiOutlinePlusCircle,\r\n  AiOutlineCloseCircle,\r\n} from \"react-icons/ai\";\r\nimport styled, { withTheme } from \"styled-components\";\r\n\r\nimport { Input, RenderSelect, Button, Option } from \"../web\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst DrawerWrapperRenderer = styled.div`\r\n  position: relative;\r\n  height: 60px;\r\n  padding: 0px 0px 0px 10px;\r\n  overflow: hidden;\r\n  /* text-align: center; */\r\n  /* display: grid;\r\n  place-items: center; */\r\n\r\n  background: transparent;\r\n  border: 1px solid #ebedf0;\r\n  border-radius: 7px;\r\n  margin-bottom: 20px;\r\n  .ant-drawer-mask {\r\n    background-color: transparent !important;\r\n  }\r\n  .ant-drawer-content-wrapper {\r\n    width: 100% !important;\r\n    .ant-drawer-content {\r\n      background: transparent !important;\r\n      .ant-drawer-wrapper-body {\r\n        .ant-drawer-body {\r\n          padding: 0;\r\n          padding-left: 10px;\r\n          background: white !important;\r\n          .social-wrapper {\r\n            /* background: red; */\r\n            scrollbar-width: none; /* Firefox */\r\n            /* -ms-overflow-style: none; */\r\n            /* width: 0px; */\r\n            /* background: transparent;  */\r\n          }\r\n          /* .social-wrapper::-webkit-scrollbar {\r\n          } */\r\n        }\r\n        .ant-drawer-header {\r\n          .ant-drawer-title {\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst InputStylized = styled(Input)`\r\n  background: white !important;\r\n  border-radius: 7px;\r\n  border: solid 2px #d8d8d8;\r\n  height: 60px !important;\r\n  font-size: 20px;\r\n  padding: 0 10px;\r\n  caret-color: #4643d3;\r\n  color: #4643d3 !important;\r\n  font-family: Rubik;\r\n  font-weight: normal;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  input {\r\n    background: transparent !important;\r\n    caret-color: white;\r\n    color: #4643d3 !important;\r\n    font-size: 15px;\r\n    /* word-spacing:-3px; */\r\n    font-family: Rubik;\r\n    font-weight: normal;\r\n    font-stretch: normal;\r\n    font-style: normal;\r\n  }\r\n  input:focus {\r\n    caret-color: #4643d3;\r\n    color: #4643d3;\r\n    background-color: transparent !important;\r\n  }\r\n  input:-webkit-autofill,\r\n  input:-webkit-autofill:hover,\r\n  input:-webkit-autofill:focus {\r\n    transition: background-color 5000s ease-in-out 0s;\r\n    -webkit-text-fill-color: #4643d3;\r\n    caret-color: #4643d3;\r\n    color: #4643d3;\r\n    background-color: transparent !important;\r\n  }\r\n`;\r\n\r\nconst AddSocialMedia = styled.div`\r\n  color: white;\r\n  padding-left: 20px;\r\n  font-size: 15px;\r\n  /* word-spacing:-3px; */\r\n  font-family: Rubik;\r\n  font-weight: normal;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n`;\r\n\r\nclass DynamicFieldSet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n    };\r\n  }\r\n\r\n  showDrawer = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  onClose = () => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  socialClickHandler = (id) => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n    this.add(id);\r\n  };\r\n  add = (id) => {\r\n    const arrayHelpers = this.props.arrayHelpers;\r\n    let obj = {};\r\n    obj = {\r\n      link: \"\",\r\n      category: id,\r\n    };\r\n\r\n    // keys.map((k) => (obj[k.key] = \"\"));\r\n\r\n    arrayHelpers.push(obj);\r\n  };\r\n\r\n  render() {\r\n    const drawerOpenState = this.state.visible;\r\n    const { socialMediaCategoryList, name, values, arrayHelpers } = this.props;\r\n    console.log(\"renderdynamic\", socialMediaCategoryList);\r\n    let formItems = null;\r\n    const availableSocialMediaCategoryList = socialMediaCategoryList.filter(\r\n      (item) => !values.find((vall) => vall.category === item._id)\r\n    );\r\n    const getImageUrlById = (idd) => {\r\n      const socObj =\r\n        socialMediaCategoryList &&\r\n        socialMediaCategoryList.find((ss) => ss._id === idd);\r\n      return socObj && socObj.image && socObj.image.url;\r\n    };\r\n    if (values) {\r\n      formItems = values.map((v, indexv) => (\r\n        <FormItem required={false} key={indexv} style={{ marginBottom: \"0\" }}>\r\n          <Field\r\n            name={`${name}[${indexv}].link`}\r\n            component={InputStylized}\r\n            placeholder={\"Link\"}\r\n            prefix={\r\n              <img\r\n                src={getImageUrlById(v[\"category\"])}\r\n                alt=\"\"\r\n                width=\"26px\"\r\n                height=\"26px\"\r\n                style={{ marginRight: \"10px\" }}\r\n              />\r\n            }\r\n            suffix={\r\n              <AiOutlineMinusCircle\r\n                style={{\r\n                  color: \"red\",\r\n                  fontSize: \"30px\",\r\n                  width: \"40px\",\r\n                  marginRight: \"-10px\",\r\n                }}\r\n                onClick={() => arrayHelpers.remove(indexv)}\r\n              />\r\n            }\r\n            type=\"text\"\r\n            label={`Link`}\r\n            value={v[\"link\"]}\r\n            key={indexv}\r\n          />\r\n        </FormItem>\r\n      ));\r\n    }\r\n    return (\r\n      <div>\r\n        <FormItem label={this.props.label}>\r\n          {formItems}\r\n          {availableSocialMediaCategoryList &&\r\n            availableSocialMediaCategoryList.length !== 0 && (\r\n              <DrawerWrapperRenderer>\r\n                <div\r\n                  style={{ width: \"100%\", marginTop: \"15px\" }}\r\n                  align=\"left\"\r\n                  onClick={this.showDrawer}\r\n                >\r\n                  {!drawerOpenState && (\r\n                    <Flex>\r\n                      <Flex.Item style={{ width: \"fit-content\", flex: 0 }}>\r\n                        <AiOutlinePlusCircle\r\n                          size={26}\r\n                          style={{ color: \"white\" }}\r\n                        />\r\n                      </Flex.Item>\r\n                      <Flex.Item style={{ flex: 4 }}>\r\n                        <AddSocialMedia>Add Social Media</AddSocialMedia>\r\n                      </Flex.Item>\r\n                    </Flex>\r\n                  )}\r\n                </div>\r\n                <Drawer\r\n                  placement=\"left\"\r\n                  closable={false}\r\n                  onClose={this.onClose}\r\n                  visible={this.state.visible}\r\n                  getContainer={false}\r\n                  style={{ position: \"absolute\" }}\r\n                >\r\n                  <div\r\n                    className=\"social-wrapper\"\r\n                    style={{ width: \"100%\", overflowX: \"scroll\" }}\r\n                  >\r\n                    <Flex\r\n                      justify=\"left\"\r\n                      style={{ width: \"fit-content\", marginTop: \"13px\" }}\r\n                    >\r\n                      <AiOutlineCloseCircle\r\n                        onClick={this.onClose}\r\n                        style={{ color: \"#4643D3\", marginRight: \"10px\" }}\r\n                        size={26}\r\n                      />\r\n\r\n                      {availableSocialMediaCategoryList.map((socia, key) => (\r\n                        <img\r\n                          src={socia && socia.image && socia.image.url}\r\n                          alt=\"\"\r\n                          width=\"26px\"\r\n                          height=\"26px\"\r\n                          style={{ marginRight: \"10px\" }}\r\n                          onClick={(e) => this.socialClickHandler(socia._id)}\r\n                        />\r\n                      ))}\r\n                    </Flex>\r\n                  </div>\r\n                </Drawer>\r\n              </DrawerWrapperRenderer>\r\n            )}\r\n        </FormItem>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDynamicFieldSet.propTypes = {\r\n  name: PropTypes.string,\r\n  label: PropTypes.string,\r\n  values: PropTypes.array,\r\n  keys: PropTypes.array,\r\n  setload: PropTypes.func,\r\n  buttonText: PropTypes.string,\r\n  arrayHelpers: PropTypes.object,\r\n};\r\n\r\nexport default withTheme(DynamicFieldSet);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form } from \"antd\";\r\nimport Select from \"./Select\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst RenderSelect = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    type,\r\n    children,\r\n    mode,\r\n    meta: { touched, error },\r\n  } = props;\r\n  let validateStatus = \"\";\r\n  if (touched && error) {\r\n    validateStatus = \"error\";\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    const { formik, name } = props;\r\n    formik.handleChange({ target: { value, name } });\r\n  };\r\n\r\n  return (\r\n    <FormItem label={label} validateStatus={validateStatus} help={error}>\r\n      <div>\r\n        <Select\r\n          mode={mode}\r\n          showSearch\r\n          optionFilterProp=\"children\"\r\n          placeholder={label}\r\n          filterOption={(input, option) =>\r\n            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n            0\r\n          }\r\n          {...input}\r\n          type={type}\r\n          onChange={onChange}\r\n        >\r\n          {children}\r\n        </Select>\r\n      </div>\r\n    </FormItem>\r\n  );\r\n};\r\n\r\nRenderSelect.propTypes = {\r\n  formik: PropTypes.object.isRequired,\r\n  input: PropTypes.object,\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n  meta: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default RenderSelect;\r\n","import { Select } from 'antd';\r\n\r\nconst { Option: ADOption } = Select;\r\n\r\nexport default ADOption;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Popconfirm as ADPopconfirm } from \"antd\";\r\n\r\nconst Popconfirm = ({ children, ...props }) => {\r\n  return (\r\n    <ADPopconfirm {...props}>\r\n      {children}\r\n    </ADPopconfirm>\r\n  );\r\n};\r\n\r\nPopconfirm.propTypes = {\r\n  children: PropTypes.node,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Popconfirm;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"formik\";\r\nimport { get as getPath } from \"lodash\";\r\nimport { isString, isNumber } from \"util\";\r\n\r\nconst PLATFORM = \"m\";\r\n\r\nclass FieldAdapter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n  onChange = (e, secondArg) => {\r\n    console.log(\"onChange\", e, secondArg, this.props);\r\n    const { formik, onChange, type: fieldType } = this.props;\r\n    if (onChange) {\r\n      onChange(e);\r\n    }\r\n    if (fieldType === \"image\" || fieldType === \"media\") {\r\n      formik.setFieldValue(this.props.name, e);\r\n    }\r\n    else if (e._isAMomentObject && secondArg) {\r\n      this.props.formik.setFieldValue(this.props.name, secondArg);\r\n    } else if (\r\n      Array.isArray(e) &&\r\n      e[0]._isAMomentObject &&\r\n      e[1]._isAMomentObject &&\r\n      secondArg\r\n    ) {\r\n      this.props.formik.setFieldValue(this.props.name, secondArg);\r\n    } else if (isString(e)) {\r\n      // for Option Field\r\n      this.props.formik.setFieldValue(this.props.name, e);\r\n    } else if (isNumber(e)) {\r\n      this.props.formik.setFieldValue(this.props.name, e);\r\n    } else if (e && e.target && e.target.type == \"radio\") {\r\n      this.props.formik.setFieldValue(e.target.name, e.target.value);\r\n    } else if (e && e.target && e.target.checked) {\r\n      this.props.formik.setFieldValue(e.target.name, e.target.checked);\r\n    } else if (e && e.target && e.target.type == \"number\") {\r\n      this.props.formik.setFieldValue(e.target.name, parseInt(e.target.value));\r\n    } else {\r\n      formik.handleChange(e);\r\n    }\r\n  };\r\n\r\n  onBlur = (e) => {\r\n    const { formik, onBlur, name } = this.props;\r\n    if (onBlur) {\r\n      onBlur(e);\r\n    } else {\r\n      if (PLATFORM === \"mobile\") {\r\n        formik.setFieldTouched(name, true);\r\n      } else {\r\n        // console.log(name);\r\n        // formik.handleBlur(e);\r\n        formik.setFieldTouched(name, true);\r\n      }\r\n    }\r\n  };\r\n\r\n  onChangeText = (value) => {\r\n    const { formik, onChangeText, onChange, name } = this.props;\r\n    if (onChange && !onChangeText) {\r\n      onChange(value);\r\n    } else if (onChangeText) {\r\n      onChangeText(value);\r\n    } else {\r\n      formik.setFieldValue(name, value);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { formik, component, name, defaultChecked, disabled } = this.props;\r\n    let { defaultValue } = this.props;\r\n    let { value, checked } = this.props;\r\n    value = value || \"\";\r\n    // const type = this.props.type;\r\n    // if (type == 'number') {\r\n    //   value = parseInt(value);\r\n    //   defaultValue = parseInt(defaultValue);\r\n    //   console.log(value);\r\n    // }\r\n\r\n    checked = checked || false;\r\n    const meta = {\r\n      touched: getPath(formik.touched, name),\r\n      error: getPath(formik.errors, name),\r\n    };\r\n    const input = {\r\n      onBlur: this.onBlur,\r\n      name,\r\n      value,\r\n      checked,\r\n      defaultValue,\r\n      defaultChecked,\r\n      disabled,\r\n    };\r\n\r\n    const changeEventHandler =\r\n      PLATFORM === \"mobile\" ? \"onChangeText\" : \"onChange\";\r\n    input[changeEventHandler] = this[changeEventHandler];\r\n\r\n    return React.createElement(component, {\r\n      ...this.props,\r\n      input,\r\n      meta,\r\n    });\r\n  }\r\n}\r\n\r\nFieldAdapter.propTypes = {\r\n  formik: PropTypes.object.isRequired,\r\n  component: PropTypes.func,\r\n  type: PropTypes.string,\r\n  onChangeText: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.any,\r\n  defaultValue: PropTypes.any,\r\n  checked: PropTypes.bool,\r\n  defaultChecked: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nexport default connect(FieldAdapter);\r\n","/**\r\n * Validates if the value is empty.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const required = (value) => (value ? undefined : 'Field Required');\r\n\r\n/**\r\n * Validates the maximal length of the value.\r\n * Usage: const maxLength15 = maxLength(15)\r\n *\r\n * @param max\r\n * @return {undefined | string}\r\n */\r\nexport const maxLength = (max) => (value) =>\r\n  value && value.length > max ? `Input shouldn't be bigger than ${max} characters` : undefined;\r\n\r\n/**\r\n * Validates the minimal length of the value.\r\n * Usage: export const minLength2 = minLength(2)\r\n *\r\n * @param min\r\n * @return {undefined | string}\r\n */\r\nexport const minLength = (min) => (value) =>\r\n  value && value.length < min ? `Input should be bigger than ${min} characters` : undefined;\r\n\r\n/**\r\n * Validates if the value is a number.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const number = (value) => (value && isNaN(Number(value)) ? 'Input is not a number' : undefined);\r\n\r\n/**\r\n * Validates if the value is a string.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const string = (value) =>\r\n  value && !(typeof value === 'string' || value instanceof String) ? 'Input is not a string' : undefined;\r\n\r\n/**\r\n * Validates the minimal value.\r\n * Usage: export const minValue18 = minValue(18);\r\n *\r\n * @param min\r\n * @return {undefined | string}\r\n */\r\nexport const minValue = (min) => (value) =>\r\n  value && value < min ? `Input should be bigger than ${min}` : undefined;\r\n\r\n/**\r\n * Validates the email.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const email = (value) =>\r\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Input is not an email' : undefined;\r\n\r\n/**\r\n * Validates if the value is alpha-numeric.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const alphaNumeric = (value) =>\r\n  value && /[^a-zA-Z0-9 ]/i.test(value) ? 'Input is not alpha numeric' : undefined;\r\n\r\n/**\r\n * Validates the phone number.\r\n *\r\n * @param value\r\n * @return {undefined | string}\r\n */\r\nexport const phoneNumber = (value) =>\r\n  value && !/^(\\+)?([ 0-9]){10,16}$/i.test(value) ? 'Input is not a phone number' : undefined;\r\n\r\n\r\n\r\n/**\r\n * Validates the input object according to the input schema.\r\n *\r\n * @param object\r\n * @param schema\r\n * @return object with errors\r\n */\r\nexport const validate = (object, schema) => {\r\n  const errors = {};\r\n  const validateFormInner = (\r\n    values,\r\n    innerSchema,\r\n    collector\r\n  ) => {\r\n    Object.keys(innerSchema)\r\n      .filter(v => innerSchema.hasOwnProperty(v))\r\n      .forEach(v => {\r\n        const s = innerSchema[v];\r\n\r\n        if (Array.isArray(s)) {\r\n          s.forEach(validator => {\r\n            const result = validator(values[v], values);\r\n            if (result) {\r\n              collector[v] = result;\r\n            }\r\n          });\r\n        } else {\r\n          validateFormInner(values[v], innerSchema[v], collector);\r\n        }\r\n      });\r\n\r\n    return collector;\r\n  };\r\n\r\n  const collectedErrors = validateFormInner(object, schema, errors);\r\n  return Object.keys(collectedErrors).length ? collectedErrors : undefined;\r\n};"],"sourceRoot":""}