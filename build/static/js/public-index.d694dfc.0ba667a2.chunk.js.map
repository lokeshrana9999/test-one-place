{"version":3,"sources":["public-index.js"],"names":["configureStore","window","__REDUX_STATE__","store","persistor","globalUsername","location","host","split","AppBundle","loading","Provider","value","appType","onload","Loadable","preloadReady","then","ReactDOM","hydrate","document","getElementById"],"mappings":"mKAAA,wH,EAc6BA,YAAeC,OAAOC,iBAAmB,IAA9DC,E,EAAAA,MAAOC,E,EAAAA,UAIXC,EAAiB,GAKfJ,QAAUA,OAAOK,WAInBD,EAHWJ,OAAOK,SAASC,KAEVC,MAAM,KACA,IAI3B,IAAMC,EACJ,kBAAC,IAAD,CAAeN,MAAOA,GACpB,kBAAC,IAAD,CAAaO,QAAS,KAAMN,UAAWA,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAgBO,SAAjB,CAA0BC,MAAOP,GAC/B,kBAAC,IAAD,CAAKQ,QAAQ,eAOvBZ,OAAOa,OAAS,WACdC,IAASC,eAAeC,MAAK,WAC3BC,IAASC,QAAQV,EAAWW,SAASC,eAAe,e","file":"static/js/public-index.d694dfc.0ba667a2.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loadable from \"react-loadable\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport \"./styles/index.less\";\nimport App from \"./App\";\nimport configureStore from \"./store/configureStore\";\nimport { UsernameContext } from \"./api\";\n\n// import registerServiceWorker from './registerServiceWorker';\n\nconst { store, persistor } = configureStore(window.__REDUX_STATE__ || {});\n\nconst currentEnv = process.env.NODE_ENV;\n\nvar globalUsername = \"\";\n\nif (currentEnv === \"development\") {\n  globalUsername = \"lokeshrana9999\";\n} else if (currentEnv === \"production\") {\n  if (window && window.location) {\n    var full = window.location.host;\n    //window.location.host is subdomain.domain.com\n    var parts = full.split(\".\");\n    globalUsername = parts[0];\n  }\n}\n\nconst AppBundle = (\n  <ReduxProvider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <UsernameContext.Provider value={globalUsername}>\n          <App appType=\"public\" />\n        </UsernameContext.Provider>\n      </BrowserRouter>\n    </PersistGate>\n  </ReduxProvider>\n);\n\nwindow.onload = () => {\n  Loadable.preloadReady().then(() => {\n    ReactDOM.hydrate(AppBundle, document.getElementById(\"root\"));\n  });\n};\n\n// registerServiceWorker();\n"],"sourceRoot":""}